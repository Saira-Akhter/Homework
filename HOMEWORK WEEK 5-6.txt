HOMEWORK WEEK 5-6(handout for students)TASK 1 (Agile Techniques)Question 1Complete definitions for Scrum related key terminology provided below.SCRUM CEREMONIES·        Product backlog refinement – An ongoing process where products requirement details are reviewed and estimates for the time and effort required to complete tasks are added, so tasks are clearly defined and prioritised.·        Sprint planning – Setting a goal for the upcoming sprint and determining which product backlog items will be discussed. ·        Daily scrum – Each person in the development team reports what they did yesterday and what they will do today to work towards the sprint goal, and if there are any issues. This allows progress to be tracked and adjust the backlog if needed. ·        Sprint review – After the sprint, the project is demonstrated and assessed against the goal to see what was accomplished. Feedback is given and it is determined whether there is any additional work that needs to be done.·        Sprint retrospective – A meeting held at the end of the sprint to focus on the process rather than the product. The team identifies what went well in the sprint and what could be improved for the next one.  SCRUM ROLES·        ScrumMaster – Leads the Scrum team and keeps them organized and focusing on using Scrum methodologies by facilitating scrum meetings and helping identify and solve issues.·        Product Owner – Helps create the product roadmap, manages the product backlog and ensures the company gains maximum value from the product. ·        Development Team – Responsible for meeting the goals set in Sprint planning by delivering the increments of the product itself.  Question 2 You are leading a development team that was given a task to create a new yoga booking system.High level description of the system is as follows: ·        It has a very simple interface to accept user input (bookings) and display classes information·        All bookings, appointments, schedules etc should be stored in a SQL database.·        There is a ‘backend’ system that should be written in Python to handle the logic and manage the data flow. Your team has two weeks to build a simple prototype that will be shown to the client to seek their feedback and discuss further enhancements. TASK·        Break this task into smaller stories (chunks of work) for the team to work on.·        Assume that one person works on one task.·        Mark tasks that can be worked on in parallel and perhaps those that need to be worked on in particular order.Tasks: * Interface which displays classes info. * Accept bookings from the user. * Store details of the bookings within the SQL database. * Ensure that there is a maximum number of bookings set for each class.* Ensure that a user can’t book overlapping classes and if needed, a maximum number of classes that one user can book in a certain timeframe. * A way of cancelling bookings.* Make a waiting list that notifies a user via email if a space has become available in a previously full class they were unable to book on to.* Confirm to the user that they have successfully booked a class.* Create a user login/sign up system. * Separate staff and user login systems so that staff can create/amend classes and see who is booked onto a class. - The frontend interface of the website can be worked on at the same time as the backend database.- There needs to be a maximum number of bookings per class set before allowing the user to become added to the waiting list. - There needs to be a user log in / sign up as a way of identifying the user first so they can’t book overlapping/ too many classes, and to send emails to users. - Details of bookings must be stored within the database first before making this information visible to staff. - A way of booking a class needs to be made before a reservation can be cancelled. TASK 2 (SQL)Question 1Design a cinema booking system.Think how you would approach the problem and what are potential ways of solving it?You do not need to write actual code, but describe the high-level approach:·        Draw a list of key requirements·        What are your main considerations?·        What would be your common or biggest problems?·        What components or tools would you potentially use?·        You are welcome to draw a diagram (a very simple one) for the process flow to explain how  it is going to work. Key requirements:- Interface displaying film name, description, age rating, genre, and the times it is showing on the current day, as well as allowing the user to show times on upcoming days. - When the user selects a time, then asking the user how many tickets they want to purchase, with a maximum set. - Showing the seats available on a diagram and allowing the user to select their chosen seats from the ones available, with the number they pick being the same as the number of tickets they are buying. - Showing the different price ranges for the different seats on the diagram.- A payment page with different options such as card, PayPal, or in person payment. - Email confirmation with a reference number to collect the tickets or digital tickets. - Upcoming films that are not available to purchase tickets for yet displayed on website.- A user sign in/up or checkout as guest. - When signing in, display tickets previously purchased. - Ability to accept discount code when paying. Main considerations:- Must send reference number and payment confirmation to user email address so they can access the tickets.- Payment must be secure. - A clear breakdown of the total costs.- Asks for confirmation before taking payment to check date/time/film/seats are all correct. - User friendly interface – not overly complicated. - Database storing which seats are taken so they can’t be double booked. Problems:- Website security when taking payments.- What happens if two customers try booking the same seat at the same time. - Spam bookings.- Customer not receiving confirmation email promptly. Tools:- SQL database of customer, seat, room, film, time, day. - HTML/CSS for the interface. - Python for backend tasks such as taking payment and sending confirmation emails. - An API to show a synopsis of the movie and the actors in it. 